/**
 * Generated by Scrooge
 *   version: 4.3.0
 *   rev: 64fd5eddcaea45735958d3f67f49152ca9767a5e
 *   built at: 20151205-094831
 */
package com.twitter.zipkin.thriftscala

import com.twitter.scrooge.ThriftEnum

/**
 * A subset of thrift base types, except BYTES.
 */
@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
case object AnnotationType {
  /**
   * Set to 0x01 when key is CLIENT_ADDR or SERVER_ADDR
   */
  case object Bool extends com.twitter.zipkin.thriftscala.AnnotationType {
    val value = 0
    val name = "Bool"
    val originalName = "BOOL"
  }

  private[this] val _SomeBool = _root_.scala.Some(com.twitter.zipkin.thriftscala.AnnotationType.Bool)
  /**
   * No encoding, or type is unknown.
   */
  case object Bytes extends com.twitter.zipkin.thriftscala.AnnotationType {
    val value = 1
    val name = "Bytes"
    val originalName = "BYTES"
  }

  private[this] val _SomeBytes = _root_.scala.Some(com.twitter.zipkin.thriftscala.AnnotationType.Bytes)
  
  case object I16 extends com.twitter.zipkin.thriftscala.AnnotationType {
    val value = 2
    val name = "I16"
    val originalName = "I16"
  }

  private[this] val _SomeI16 = _root_.scala.Some(com.twitter.zipkin.thriftscala.AnnotationType.I16)
  
  case object I32 extends com.twitter.zipkin.thriftscala.AnnotationType {
    val value = 3
    val name = "I32"
    val originalName = "I32"
  }

  private[this] val _SomeI32 = _root_.scala.Some(com.twitter.zipkin.thriftscala.AnnotationType.I32)
  
  case object I64 extends com.twitter.zipkin.thriftscala.AnnotationType {
    val value = 4
    val name = "I64"
    val originalName = "I64"
  }

  private[this] val _SomeI64 = _root_.scala.Some(com.twitter.zipkin.thriftscala.AnnotationType.I64)
  
  case object Double extends com.twitter.zipkin.thriftscala.AnnotationType {
    val value = 5
    val name = "Double"
    val originalName = "DOUBLE"
  }

  private[this] val _SomeDouble = _root_.scala.Some(com.twitter.zipkin.thriftscala.AnnotationType.Double)
  /**
   * the only type zipkin v1 supports search against.
   */
  case object String extends com.twitter.zipkin.thriftscala.AnnotationType {
    val value = 6
    val name = "String"
    val originalName = "STRING"
  }

  private[this] val _SomeString = _root_.scala.Some(com.twitter.zipkin.thriftscala.AnnotationType.String)

  case class EnumUnknownAnnotationType(value: Int) extends com.twitter.zipkin.thriftscala.AnnotationType {
    val name = "EnumUnknownAnnotationType" + value
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * @throws NoSuchElementException if the value is not found.
   */
  def apply(value: Int): com.twitter.zipkin.thriftscala.AnnotationType =
    value match {
      case 0 => com.twitter.zipkin.thriftscala.AnnotationType.Bool
      case 1 => com.twitter.zipkin.thriftscala.AnnotationType.Bytes
      case 2 => com.twitter.zipkin.thriftscala.AnnotationType.I16
      case 3 => com.twitter.zipkin.thriftscala.AnnotationType.I32
      case 4 => com.twitter.zipkin.thriftscala.AnnotationType.I64
      case 5 => com.twitter.zipkin.thriftscala.AnnotationType.Double
      case 6 => com.twitter.zipkin.thriftscala.AnnotationType.String
      case _ => throw new NoSuchElementException(value.toString)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * returns an EnumUnknownAnnotationType(value) if the value is not found.
   * In particular this allows ignoring new values added to an enum
   * in the IDL on the producer side when the consumer was not updated.
   */
  def getOrUnknown(value: Int): com.twitter.zipkin.thriftscala.AnnotationType =
    get(value) match {
      case _root_.scala.Some(e) => e
      case _root_.scala.None => EnumUnknownAnnotationType(value)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): _root_.scala.Option[com.twitter.zipkin.thriftscala.AnnotationType] =
    value match {
      case 0 => _SomeBool
      case 1 => _SomeBytes
      case 2 => _SomeI16
      case 3 => _SomeI32
      case 4 => _SomeI64
      case 5 => _SomeDouble
      case 6 => _SomeString
      case _ => _root_.scala.None
    }

  def valueOf(name: String): _root_.scala.Option[com.twitter.zipkin.thriftscala.AnnotationType] =
    name.toLowerCase match {
      case "bool" => _SomeBool
      case "bytes" => _SomeBytes
      case "i16" => _SomeI16
      case "i32" => _SomeI32
      case "i64" => _SomeI64
      case "double" => _SomeDouble
      case "string" => _SomeString
      case _ => _root_.scala.None
    }

  lazy val list: List[com.twitter.zipkin.thriftscala.AnnotationType] = scala.List[com.twitter.zipkin.thriftscala.AnnotationType](
    com.twitter.zipkin.thriftscala.AnnotationType.Bool,
    com.twitter.zipkin.thriftscala.AnnotationType.Bytes,
    com.twitter.zipkin.thriftscala.AnnotationType.I16,
    com.twitter.zipkin.thriftscala.AnnotationType.I32,
    com.twitter.zipkin.thriftscala.AnnotationType.I64,
    com.twitter.zipkin.thriftscala.AnnotationType.Double,
    com.twitter.zipkin.thriftscala.AnnotationType.String
  )
}


/**
 * A subset of thrift base types, except BYTES.
 */
@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
sealed trait AnnotationType extends ThriftEnum with Serializable
